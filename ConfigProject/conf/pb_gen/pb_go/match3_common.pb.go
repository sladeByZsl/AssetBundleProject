// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match3_common.proto

package matchproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//棋子类型
type EChipType int32

const (
	EChipType_CT_None             EChipType = 0
	EChipType_CT_Color            EChipType = 1
	EChipType_CT_Bonus            EChipType = 2
	EChipType_CT_Block            EChipType = 3
	EChipType_CT_Wall             EChipType = 4
	EChipType_CT_Portal           EChipType = 5
	EChipType_CT_PortalIn         EChipType = 6
	EChipType_CT_PortalOut        EChipType = 7
	EChipType_CT_Gravity          EChipType = 8
	EChipType_CT_TargetOnly       EChipType = 9
	EChipType_CT_BirthPoint       EChipType = 10
	EChipType_CT_BirthPointWeight EChipType = 11
	EChipType_CT_BirthPointLoop   EChipType = 12
	EChipType_CT_Background       EChipType = 13
	EChipType_CT_Collection       EChipType = 14
	EChipType_CT_Case2x2          EChipType = 15
	EChipType_CT_CollectionEntry  EChipType = 16
	EChipType_CT_Camera           EChipType = 17
	EChipType_CT_Area             EChipType = 18
	EChipType_CT_NoReshuffle      EChipType = 19
	EChipType_CT_NoMatch          EChipType = 20
	EChipType_CT_NoBoosters       EChipType = 21
	EChipType_CT_InitRandom       EChipType = 22
	EChipType_CT_InitGroup        EChipType = 23
	EChipType_CT_Pipe             EChipType = 24
	EChipType_CT_Case1x2          EChipType = 25
	EChipType_CT_Case2x1          EChipType = 26
	EChipType_CT_Mailbox          EChipType = 27
	//CT_BlockChain		= 28;//阻挡锁链
	EChipType_CT_RedCarpet        EChipType = 29
	EChipType_CT_RedCarpetPath    EChipType = 30
	EChipType_CT_RedCarpetEnd     EChipType = 62
	EChipType_CT_Leaves           EChipType = 31
	EChipType_CT_Gnomes           EChipType = 32
	EChipType_CT_Recycle          EChipType = 33
	EChipType_CT_Cookie           EChipType = 34
	EChipType_CT_Foam             EChipType = 35
	EChipType_CT_Copy             EChipType = 36
	EChipType_CT_ConveyorBelt     EChipType = 37
	EChipType_CT_ConveyorBeltLink EChipType = 38
	EChipType_CT_Jelly            EChipType = 39
	EChipType_CT_Cherries         EChipType = 40
	EChipType_CT_Henhouse         EChipType = 41
	EChipType_CT_HairBall         EChipType = 42
	EChipType_CT_Letter           EChipType = 43
	EChipType_CT_Fox              EChipType = 44
)

var EChipType_name = map[int32]string{
	0:  "CT_None",
	1:  "CT_Color",
	2:  "CT_Bonus",
	3:  "CT_Block",
	4:  "CT_Wall",
	5:  "CT_Portal",
	6:  "CT_PortalIn",
	7:  "CT_PortalOut",
	8:  "CT_Gravity",
	9:  "CT_TargetOnly",
	10: "CT_BirthPoint",
	11: "CT_BirthPointWeight",
	12: "CT_BirthPointLoop",
	13: "CT_Background",
	14: "CT_Collection",
	15: "CT_Case2x2",
	16: "CT_CollectionEntry",
	17: "CT_Camera",
	18: "CT_Area",
	19: "CT_NoReshuffle",
	20: "CT_NoMatch",
	21: "CT_NoBoosters",
	22: "CT_InitRandom",
	23: "CT_InitGroup",
	24: "CT_Pipe",
	25: "CT_Case1x2",
	26: "CT_Case2x1",
	27: "CT_Mailbox",
	29: "CT_RedCarpet",
	30: "CT_RedCarpetPath",
	62: "CT_RedCarpetEnd",
	31: "CT_Leaves",
	32: "CT_Gnomes",
	33: "CT_Recycle",
	34: "CT_Cookie",
	35: "CT_Foam",
	36: "CT_Copy",
	37: "CT_ConveyorBelt",
	38: "CT_ConveyorBeltLink",
	39: "CT_Jelly",
	40: "CT_Cherries",
	41: "CT_Henhouse",
	42: "CT_HairBall",
	43: "CT_Letter",
	44: "CT_Fox",
}

var EChipType_value = map[string]int32{
	"CT_None":             0,
	"CT_Color":            1,
	"CT_Bonus":            2,
	"CT_Block":            3,
	"CT_Wall":             4,
	"CT_Portal":           5,
	"CT_PortalIn":         6,
	"CT_PortalOut":        7,
	"CT_Gravity":          8,
	"CT_TargetOnly":       9,
	"CT_BirthPoint":       10,
	"CT_BirthPointWeight": 11,
	"CT_BirthPointLoop":   12,
	"CT_Background":       13,
	"CT_Collection":       14,
	"CT_Case2x2":          15,
	"CT_CollectionEntry":  16,
	"CT_Camera":           17,
	"CT_Area":             18,
	"CT_NoReshuffle":      19,
	"CT_NoMatch":          20,
	"CT_NoBoosters":       21,
	"CT_InitRandom":       22,
	"CT_InitGroup":        23,
	"CT_Pipe":             24,
	"CT_Case1x2":          25,
	"CT_Case2x1":          26,
	"CT_Mailbox":          27,
	"CT_RedCarpet":        29,
	"CT_RedCarpetPath":    30,
	"CT_RedCarpetEnd":     62,
	"CT_Leaves":           31,
	"CT_Gnomes":           32,
	"CT_Recycle":          33,
	"CT_Cookie":           34,
	"CT_Foam":             35,
	"CT_Copy":             36,
	"CT_ConveyorBelt":     37,
	"CT_ConveyorBeltLink": 38,
	"CT_Jelly":            39,
	"CT_Cherries":         40,
	"CT_Henhouse":         41,
	"CT_HairBall":         42,
	"CT_Letter":           43,
	"CT_Fox":              44,
}

func (x EChipType) Enum() *EChipType {
	p := new(EChipType)
	*p = x
	return p
}

func (x EChipType) String() string {
	return proto.EnumName(EChipType_name, int32(x))
}

func (x *EChipType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EChipType_value, data, "EChipType")
	if err != nil {
		return err
	}
	*x = EChipType(value)
	return nil
}

func (EChipType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{0}
}

//颜色
type EColor int32

const (
	EColor_Color_None   EColor = 0
	EColor_Color_Red    EColor = 1
	EColor_Color_Green  EColor = 2
	EColor_Color_Yellow EColor = 3
	EColor_Color_Blue   EColor = 4
	EColor_Color_Pink   EColor = 5
	EColor_Color_Purple EColor = 6
	EColor_Color_Orange EColor = 7
)

var EColor_name = map[int32]string{
	0: "Color_None",
	1: "Color_Red",
	2: "Color_Green",
	3: "Color_Yellow",
	4: "Color_Blue",
	5: "Color_Pink",
	6: "Color_Purple",
	7: "Color_Orange",
}

var EColor_value = map[string]int32{
	"Color_None":   0,
	"Color_Red":    1,
	"Color_Green":  2,
	"Color_Yellow": 3,
	"Color_Blue":   4,
	"Color_Pink":   5,
	"Color_Purple": 6,
	"Color_Orange": 7,
}

func (x EColor) Enum() *EColor {
	p := new(EColor)
	*p = x
	return p
}

func (x EColor) String() string {
	return proto.EnumName(EColor_name, int32(x))
}

func (x *EColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EColor_value, data, "EColor")
	if err != nil {
		return err
	}
	*x = EColor(value)
	return nil
}

func (EColor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{1}
}

//奖励类型，为统一名称，以后替换炸弹类型
type EBonusType int32

const (
	EBonusType_Bonus_None               EBonusType = 0
	EBonusType_Bonus_Kite               EBonusType = 1
	EBonusType_Bonus_Bomb               EBonusType = 2
	EBonusType_Bonus_VRocket            EBonusType = 3
	EBonusType_Bonus_HRocket            EBonusType = 4
	EBonusType_Bonus_Rainbow            EBonusType = 5
	EBonusType_Bonus_HRocket_Or_VRocket EBonusType = 6
)

var EBonusType_name = map[int32]string{
	0: "Bonus_None",
	1: "Bonus_Kite",
	2: "Bonus_Bomb",
	3: "Bonus_VRocket",
	4: "Bonus_HRocket",
	5: "Bonus_Rainbow",
	6: "Bonus_HRocket_Or_VRocket",
}

var EBonusType_value = map[string]int32{
	"Bonus_None":               0,
	"Bonus_Kite":               1,
	"Bonus_Bomb":               2,
	"Bonus_VRocket":            3,
	"Bonus_HRocket":            4,
	"Bonus_Rainbow":            5,
	"Bonus_HRocket_Or_VRocket": 6,
}

func (x EBonusType) Enum() *EBonusType {
	p := new(EBonusType)
	*p = x
	return p
}

func (x EBonusType) String() string {
	return proto.EnumName(EBonusType_name, int32(x))
}

func (x *EBonusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EBonusType_value, data, "EBonusType")
	if err != nil {
		return err
	}
	*x = EBonusType(value)
	return nil
}

func (EBonusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{2}
}

// 方向
type ESide int32

const (
	ESide_Side_None        ESide = 8
	ESide_Side_Bottom      ESide = 0
	ESide_Side_TopRight    ESide = 1
	ESide_Side_Right       ESide = 2
	ESide_Side_BottomRight ESide = 3
	ESide_Side_Top         ESide = 4
	ESide_Side_BottomLeft  ESide = 5
	ESide_Side_Left        ESide = 6
	ESide_Side_TopLeft     ESide = 7
)

var ESide_name = map[int32]string{
	8: "Side_None",
	0: "Side_Bottom",
	1: "Side_TopRight",
	2: "Side_Right",
	3: "Side_BottomRight",
	4: "Side_Top",
	5: "Side_BottomLeft",
	6: "Side_Left",
	7: "Side_TopLeft",
}

var ESide_value = map[string]int32{
	"Side_None":        8,
	"Side_Bottom":      0,
	"Side_TopRight":    1,
	"Side_Right":       2,
	"Side_BottomRight": 3,
	"Side_Top":         4,
	"Side_BottomLeft":  5,
	"Side_Left":        6,
	"Side_TopLeft":     7,
}

func (x ESide) Enum() *ESide {
	p := new(ESide)
	*p = x
	return p
}

func (x ESide) String() string {
	return proto.EnumName(ESide_name, int32(x))
}

func (x *ESide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESide_value, data, "ESide")
	if err != nil {
		return err
	}
	*x = ESide(value)
	return nil
}

func (ESide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{3}
}

// 阻挡类型
type EBlockType int32

const (
	EBlockType_BT_None      EBlockType = 0
	EBlockType_BT_Block     EBlockType = 1
	EBlockType_BT_Branch    EBlockType = 2
	EBlockType_BT_Weed      EBlockType = 3
	EBlockType_BT_BrushWood EBlockType = 4
	EBlockType_BT_Carton    EBlockType = 5
)

var EBlockType_name = map[int32]string{
	0: "BT_None",
	1: "BT_Block",
	2: "BT_Branch",
	3: "BT_Weed",
	4: "BT_BrushWood",
	5: "BT_Carton",
}

var EBlockType_value = map[string]int32{
	"BT_None":      0,
	"BT_Block":     1,
	"BT_Branch":    2,
	"BT_Weed":      3,
	"BT_BrushWood": 4,
	"BT_Carton":    5,
}

func (x EBlockType) Enum() *EBlockType {
	p := new(EBlockType)
	*p = x
	return p
}

func (x EBlockType) String() string {
	return proto.EnumName(EBlockType_name, int32(x))
}

func (x *EBlockType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EBlockType_value, data, "EBlockType")
	if err != nil {
		return err
	}
	*x = EBlockType(value)
	return nil
}

func (EBlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{4}
}

type PBChipGrid int32

const (
	PBChipGrid_e_None PBChipGrid = 0
	PBChipGrid_e_1x2  PBChipGrid = 1
	PBChipGrid_e_2x1  PBChipGrid = 2
	PBChipGrid_e_2x2  PBChipGrid = 3
	PBChipGrid_e_2x3  PBChipGrid = 4
	PBChipGrid_e_3x2  PBChipGrid = 5
	PBChipGrid_e_3x3  PBChipGrid = 6
)

var PBChipGrid_name = map[int32]string{
	0: "e_None",
	1: "e_1x2",
	2: "e_2x1",
	3: "e_2x2",
	4: "e_2x3",
	5: "e_3x2",
	6: "e_3x3",
}

var PBChipGrid_value = map[string]int32{
	"e_None": 0,
	"e_1x2":  1,
	"e_2x1":  2,
	"e_2x2":  3,
	"e_2x3":  4,
	"e_3x2":  5,
	"e_3x3":  6,
}

func (x PBChipGrid) Enum() *PBChipGrid {
	p := new(PBChipGrid)
	*p = x
	return p
}

func (x PBChipGrid) String() string {
	return proto.EnumName(PBChipGrid_name, int32(x))
}

func (x *PBChipGrid) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PBChipGrid_value, data, "PBChipGrid")
	if err != nil {
		return err
	}
	*x = PBChipGrid(value)
	return nil
}

func (PBChipGrid) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{5}
}

// 棋子定义表
type PBChipDefinition struct {
	Chips                []*PBChip `protobuf:"bytes,1,rep,name=chips" json:"chips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PBChipDefinition) Reset()         { *m = PBChipDefinition{} }
func (m *PBChipDefinition) String() string { return proto.CompactTextString(m) }
func (*PBChipDefinition) ProtoMessage()    {}
func (*PBChipDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{0}
}

func (m *PBChipDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipDefinition.Unmarshal(m, b)
}
func (m *PBChipDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipDefinition.Marshal(b, m, deterministic)
}
func (m *PBChipDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipDefinition.Merge(m, src)
}
func (m *PBChipDefinition) XXX_Size() int {
	return xxx_messageInfo_PBChipDefinition.Size(m)
}
func (m *PBChipDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipDefinition proto.InternalMessageInfo

func (m *PBChipDefinition) GetChips() []*PBChip {
	if m != nil {
		return m.Chips
	}
	return nil
}

type PBChipPropertyDefinition struct {
	Properties           []*PBChipProperties `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PBChipPropertyDefinition) Reset()         { *m = PBChipPropertyDefinition{} }
func (m *PBChipPropertyDefinition) String() string { return proto.CompactTextString(m) }
func (*PBChipPropertyDefinition) ProtoMessage()    {}
func (*PBChipPropertyDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{1}
}

func (m *PBChipPropertyDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipPropertyDefinition.Unmarshal(m, b)
}
func (m *PBChipPropertyDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipPropertyDefinition.Marshal(b, m, deterministic)
}
func (m *PBChipPropertyDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipPropertyDefinition.Merge(m, src)
}
func (m *PBChipPropertyDefinition) XXX_Size() int {
	return xxx_messageInfo_PBChipPropertyDefinition.Size(m)
}
func (m *PBChipPropertyDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipPropertyDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipPropertyDefinition proto.InternalMessageInfo

func (m *PBChipPropertyDefinition) GetProperties() []*PBChipProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type PBChipDestroyPrioritys struct {
	Prioritys            []*PBChipDestroyPriority `protobuf:"bytes,1,rep,name=prioritys" json:"prioritys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PBChipDestroyPrioritys) Reset()         { *m = PBChipDestroyPrioritys{} }
func (m *PBChipDestroyPrioritys) String() string { return proto.CompactTextString(m) }
func (*PBChipDestroyPrioritys) ProtoMessage()    {}
func (*PBChipDestroyPrioritys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{2}
}

func (m *PBChipDestroyPrioritys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipDestroyPrioritys.Unmarshal(m, b)
}
func (m *PBChipDestroyPrioritys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipDestroyPrioritys.Marshal(b, m, deterministic)
}
func (m *PBChipDestroyPrioritys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipDestroyPrioritys.Merge(m, src)
}
func (m *PBChipDestroyPrioritys) XXX_Size() int {
	return xxx_messageInfo_PBChipDestroyPrioritys.Size(m)
}
func (m *PBChipDestroyPrioritys) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipDestroyPrioritys.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipDestroyPrioritys proto.InternalMessageInfo

func (m *PBChipDestroyPrioritys) GetPrioritys() []*PBChipDestroyPriority {
	if m != nil {
		return m.Prioritys
	}
	return nil
}

type PBChipShowLayers struct {
	Layers               []*PBChipShowLayer `protobuf:"bytes,1,rep,name=layers" json:"layers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PBChipShowLayers) Reset()         { *m = PBChipShowLayers{} }
func (m *PBChipShowLayers) String() string { return proto.CompactTextString(m) }
func (*PBChipShowLayers) ProtoMessage()    {}
func (*PBChipShowLayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{3}
}

func (m *PBChipShowLayers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipShowLayers.Unmarshal(m, b)
}
func (m *PBChipShowLayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipShowLayers.Marshal(b, m, deterministic)
}
func (m *PBChipShowLayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipShowLayers.Merge(m, src)
}
func (m *PBChipShowLayers) XXX_Size() int {
	return xxx_messageInfo_PBChipShowLayers.Size(m)
}
func (m *PBChipShowLayers) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipShowLayers.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipShowLayers proto.InternalMessageInfo

func (m *PBChipShowLayers) GetLayers() []*PBChipShowLayer {
	if m != nil {
		return m.Layers
	}
	return nil
}

type PBChipGroupMap struct {
	Map                  []string `protobuf:"bytes,1,rep,name=map" json:"map,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBChipGroupMap) Reset()         { *m = PBChipGroupMap{} }
func (m *PBChipGroupMap) String() string { return proto.CompactTextString(m) }
func (*PBChipGroupMap) ProtoMessage()    {}
func (*PBChipGroupMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{4}
}

func (m *PBChipGroupMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipGroupMap.Unmarshal(m, b)
}
func (m *PBChipGroupMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipGroupMap.Marshal(b, m, deterministic)
}
func (m *PBChipGroupMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipGroupMap.Merge(m, src)
}
func (m *PBChipGroupMap) XXX_Size() int {
	return xxx_messageInfo_PBChipGroupMap.Size(m)
}
func (m *PBChipGroupMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipGroupMap.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipGroupMap proto.InternalMessageInfo

func (m *PBChipGroupMap) GetMap() []string {
	if m != nil {
		return m.Map
	}
	return nil
}

//棋子信息
type PBChip struct {
	ChipId               *uint32           `protobuf:"varint,1,opt,name=chip_id,json=chipId" json:"chip_id,omitempty"`
	ChipType             *EChipType        `protobuf:"varint,2,opt,name=chip_type,json=chipType,enum=FunPlus.Common.Config.EChipType,def=0" json:"chip_type,omitempty"`
	Color                *EColor           `protobuf:"varint,3,opt,name=color,enum=FunPlus.Common.Config.EColor,def=0" json:"color,omitempty"`
	BonusType            *EBonusType       `protobuf:"varint,4,opt,name=bonus_type,json=bonusType,enum=FunPlus.Common.Config.EBonusType,def=0" json:"bonus_type,omitempty"`
	Name                 *string           `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	BlockGrade           *uint32           `protobuf:"varint,6,opt,name=block_grade,json=blockGrade" json:"block_grade,omitempty"`
	GradeResource        []string          `protobuf:"bytes,10,rep,name=grade_resource,json=gradeResource" json:"grade_resource,omitempty"`
	GroupIndex           *uint32           `protobuf:"varint,7,opt,name=group_index,json=groupIndex" json:"group_index,omitempty"`
	Properties           *PBChipProperties `protobuf:"bytes,9,opt,name=properties" json:"properties,omitempty"`
	ShowLayer            *uint32           `protobuf:"varint,11,opt,name=show_layer,json=showLayer" json:"show_layer,omitempty"`
	DestroyPriority      *uint32           `protobuf:"varint,12,opt,name=destroy_priority,json=destroyPriority" json:"destroy_priority,omitempty"`
	DowngradeChipId      *uint32           `protobuf:"varint,13,opt,name=downgrade_chip_id,json=downgradeChipId" json:"downgrade_chip_id,omitempty"`
	CollapsedChipId      *uint32           `protobuf:"varint,14,opt,name=collapsed_chip_id,json=collapsedChipId" json:"collapsed_chip_id,omitempty"`
	CollectAnim          *bool             `protobuf:"varint,15,opt,name=collect_anim,json=collectAnim" json:"collect_anim,omitempty"`
	Echipgrid            *PBChipGrid       `protobuf:"varint,16,opt,name=Echipgrid,json=echipgrid,enum=FunPlus.Common.Config.PBChipGrid,def=0" json:"Echipgrid,omitempty"`
	DestroyEventId       *string           `protobuf:"bytes,17,opt,name=destroy_event_id,json=destroyEventId" json:"destroy_event_id,omitempty"`
	Skin                 *string           `protobuf:"bytes,18,opt,name=skin" json:"skin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PBChip) Reset()         { *m = PBChip{} }
func (m *PBChip) String() string { return proto.CompactTextString(m) }
func (*PBChip) ProtoMessage()    {}
func (*PBChip) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{5}
}

func (m *PBChip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChip.Unmarshal(m, b)
}
func (m *PBChip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChip.Marshal(b, m, deterministic)
}
func (m *PBChip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChip.Merge(m, src)
}
func (m *PBChip) XXX_Size() int {
	return xxx_messageInfo_PBChip.Size(m)
}
func (m *PBChip) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChip.DiscardUnknown(m)
}

var xxx_messageInfo_PBChip proto.InternalMessageInfo

const Default_PBChip_ChipType EChipType = EChipType_CT_None
const Default_PBChip_Color EColor = EColor_Color_None
const Default_PBChip_BonusType EBonusType = EBonusType_Bonus_None
const Default_PBChip_Echipgrid PBChipGrid = PBChipGrid_e_None

func (m *PBChip) GetChipId() uint32 {
	if m != nil && m.ChipId != nil {
		return *m.ChipId
	}
	return 0
}

func (m *PBChip) GetChipType() EChipType {
	if m != nil && m.ChipType != nil {
		return *m.ChipType
	}
	return Default_PBChip_ChipType
}

func (m *PBChip) GetColor() EColor {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return Default_PBChip_Color
}

func (m *PBChip) GetBonusType() EBonusType {
	if m != nil && m.BonusType != nil {
		return *m.BonusType
	}
	return Default_PBChip_BonusType
}

func (m *PBChip) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PBChip) GetBlockGrade() uint32 {
	if m != nil && m.BlockGrade != nil {
		return *m.BlockGrade
	}
	return 0
}

func (m *PBChip) GetGradeResource() []string {
	if m != nil {
		return m.GradeResource
	}
	return nil
}

func (m *PBChip) GetGroupIndex() uint32 {
	if m != nil && m.GroupIndex != nil {
		return *m.GroupIndex
	}
	return 0
}

func (m *PBChip) GetProperties() *PBChipProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *PBChip) GetShowLayer() uint32 {
	if m != nil && m.ShowLayer != nil {
		return *m.ShowLayer
	}
	return 0
}

func (m *PBChip) GetDestroyPriority() uint32 {
	if m != nil && m.DestroyPriority != nil {
		return *m.DestroyPriority
	}
	return 0
}

func (m *PBChip) GetDowngradeChipId() uint32 {
	if m != nil && m.DowngradeChipId != nil {
		return *m.DowngradeChipId
	}
	return 0
}

func (m *PBChip) GetCollapsedChipId() uint32 {
	if m != nil && m.CollapsedChipId != nil {
		return *m.CollapsedChipId
	}
	return 0
}

func (m *PBChip) GetCollectAnim() bool {
	if m != nil && m.CollectAnim != nil {
		return *m.CollectAnim
	}
	return false
}

func (m *PBChip) GetEchipgrid() PBChipGrid {
	if m != nil && m.Echipgrid != nil {
		return *m.Echipgrid
	}
	return Default_PBChip_Echipgrid
}

func (m *PBChip) GetDestroyEventId() string {
	if m != nil && m.DestroyEventId != nil {
		return *m.DestroyEventId
	}
	return ""
}

func (m *PBChip) GetSkin() string {
	if m != nil && m.Skin != nil {
		return *m.Skin
	}
	return ""
}

// Cell位置信息
type PBCellPos struct {
	X                    *int32   `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                    *int32   `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBCellPos) Reset()         { *m = PBCellPos{} }
func (m *PBCellPos) String() string { return proto.CompactTextString(m) }
func (*PBCellPos) ProtoMessage()    {}
func (*PBCellPos) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{6}
}

func (m *PBCellPos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBCellPos.Unmarshal(m, b)
}
func (m *PBCellPos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBCellPos.Marshal(b, m, deterministic)
}
func (m *PBCellPos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBCellPos.Merge(m, src)
}
func (m *PBCellPos) XXX_Size() int {
	return xxx_messageInfo_PBCellPos.Size(m)
}
func (m *PBCellPos) XXX_DiscardUnknown() {
	xxx_messageInfo_PBCellPos.DiscardUnknown(m)
}

var xxx_messageInfo_PBCellPos proto.InternalMessageInfo

func (m *PBCellPos) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *PBCellPos) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

//棋子基础属性
type PBChipProperties struct {
	Interactive          *bool      `protobuf:"varint,1,opt,name=interactive,def=0" json:"interactive,omitempty"`
	Falling              *bool      `protobuf:"varint,2,opt,name=falling,def=0" json:"falling,omitempty"`
	BlockMove            *bool      `protobuf:"varint,3,opt,name=block_move,json=blockMove,def=0" json:"block_move,omitempty"`
	BlockSwap            *bool      `protobuf:"varint,18,opt,name=block_swap,json=blockSwap,def=0" json:"block_swap,omitempty"`
	BlockDamageU         *bool      `protobuf:"varint,4,opt,name=block_damage_u,json=blockDamageU,def=0" json:"block_damage_u,omitempty"`
	BlockDamageT         *bool      `protobuf:"varint,6,opt,name=block_damage_t,json=blockDamageT,def=0" json:"block_damage_t,omitempty"`
	Active               *bool      `protobuf:"varint,5,opt,name=active,def=0" json:"active,omitempty"`
	Growing              *bool      `protobuf:"varint,16,opt,name=growing,def=0" json:"growing,omitempty"`
	Colored              *bool      `protobuf:"varint,7,opt,name=colored,def=0" json:"colored,omitempty"`
	Visible              *bool      `protobuf:"varint,8,opt,name=visible,def=0" json:"visible,omitempty"`
	Target               *bool      `protobuf:"varint,9,opt,name=target,def=0" json:"target,omitempty"`
	MatchDamage          *bool      `protobuf:"varint,10,opt,name=match_damage,json=matchDamage,def=0" json:"match_damage,omitempty"`
	WindDamage           *bool      `protobuf:"varint,11,opt,name=wind_damage,json=windDamage,def=0" json:"wind_damage,omitempty"`
	ExplosionDamage      *bool      `protobuf:"varint,12,opt,name=explosion_damage,json=explosionDamage,def=0" json:"explosion_damage,omitempty"`
	HummerDamage         *bool      `protobuf:"varint,13,opt,name=hummer_damage,json=hummerDamage,def=0" json:"hummer_damage,omitempty"`
	Reshulffle           *bool      `protobuf:"varint,14,opt,name=reshulffle,def=0" json:"reshulffle,omitempty"`
	Multigrades          *bool      `protobuf:"varint,15,opt,name=multigrades,def=0" json:"multigrades,omitempty"`
	BlockMatch           *bool      `protobuf:"varint,17,opt,name=block_match,json=blockMatch,def=0" json:"block_match,omitempty"`
	AutoFilling          *bool      `protobuf:"varint,19,opt,name=auto_filling,json=autoFilling,def=0" json:"auto_filling,omitempty"`
	BlockRainbowSelect   *bool      `protobuf:"varint,22,opt,name=block_rainbow_select,json=blockRainbowSelect,def=0" json:"block_rainbow_select,omitempty"`
	MinusGrade           *bool      `protobuf:"varint,23,opt,name=minus_grade,json=minusGrade,def=0" json:"minus_grade,omitempty"`
	ChipType             *EChipType `protobuf:"varint,20,opt,name=chip_type,json=chipType,enum=FunPlus.Common.Config.EChipType,def=0" json:"chip_type,omitempty"`
	ChipId               *uint32    `protobuf:"varint,21,opt,name=chip_id,json=chipId" json:"chip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PBChipProperties) Reset()         { *m = PBChipProperties{} }
func (m *PBChipProperties) String() string { return proto.CompactTextString(m) }
func (*PBChipProperties) ProtoMessage()    {}
func (*PBChipProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{7}
}

func (m *PBChipProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipProperties.Unmarshal(m, b)
}
func (m *PBChipProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipProperties.Marshal(b, m, deterministic)
}
func (m *PBChipProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipProperties.Merge(m, src)
}
func (m *PBChipProperties) XXX_Size() int {
	return xxx_messageInfo_PBChipProperties.Size(m)
}
func (m *PBChipProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipProperties.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipProperties proto.InternalMessageInfo

const Default_PBChipProperties_Interactive bool = false
const Default_PBChipProperties_Falling bool = false
const Default_PBChipProperties_BlockMove bool = false
const Default_PBChipProperties_BlockSwap bool = false
const Default_PBChipProperties_BlockDamageU bool = false
const Default_PBChipProperties_BlockDamageT bool = false
const Default_PBChipProperties_Active bool = false
const Default_PBChipProperties_Growing bool = false
const Default_PBChipProperties_Colored bool = false
const Default_PBChipProperties_Visible bool = false
const Default_PBChipProperties_Target bool = false
const Default_PBChipProperties_MatchDamage bool = false
const Default_PBChipProperties_WindDamage bool = false
const Default_PBChipProperties_ExplosionDamage bool = false
const Default_PBChipProperties_HummerDamage bool = false
const Default_PBChipProperties_Reshulffle bool = false
const Default_PBChipProperties_Multigrades bool = false
const Default_PBChipProperties_BlockMatch bool = false
const Default_PBChipProperties_AutoFilling bool = false
const Default_PBChipProperties_BlockRainbowSelect bool = false
const Default_PBChipProperties_MinusGrade bool = false
const Default_PBChipProperties_ChipType EChipType = EChipType_CT_None

func (m *PBChipProperties) GetInteractive() bool {
	if m != nil && m.Interactive != nil {
		return *m.Interactive
	}
	return Default_PBChipProperties_Interactive
}

func (m *PBChipProperties) GetFalling() bool {
	if m != nil && m.Falling != nil {
		return *m.Falling
	}
	return Default_PBChipProperties_Falling
}

func (m *PBChipProperties) GetBlockMove() bool {
	if m != nil && m.BlockMove != nil {
		return *m.BlockMove
	}
	return Default_PBChipProperties_BlockMove
}

func (m *PBChipProperties) GetBlockSwap() bool {
	if m != nil && m.BlockSwap != nil {
		return *m.BlockSwap
	}
	return Default_PBChipProperties_BlockSwap
}

func (m *PBChipProperties) GetBlockDamageU() bool {
	if m != nil && m.BlockDamageU != nil {
		return *m.BlockDamageU
	}
	return Default_PBChipProperties_BlockDamageU
}

func (m *PBChipProperties) GetBlockDamageT() bool {
	if m != nil && m.BlockDamageT != nil {
		return *m.BlockDamageT
	}
	return Default_PBChipProperties_BlockDamageT
}

func (m *PBChipProperties) GetActive() bool {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return Default_PBChipProperties_Active
}

func (m *PBChipProperties) GetGrowing() bool {
	if m != nil && m.Growing != nil {
		return *m.Growing
	}
	return Default_PBChipProperties_Growing
}

func (m *PBChipProperties) GetColored() bool {
	if m != nil && m.Colored != nil {
		return *m.Colored
	}
	return Default_PBChipProperties_Colored
}

func (m *PBChipProperties) GetVisible() bool {
	if m != nil && m.Visible != nil {
		return *m.Visible
	}
	return Default_PBChipProperties_Visible
}

func (m *PBChipProperties) GetTarget() bool {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return Default_PBChipProperties_Target
}

func (m *PBChipProperties) GetMatchDamage() bool {
	if m != nil && m.MatchDamage != nil {
		return *m.MatchDamage
	}
	return Default_PBChipProperties_MatchDamage
}

func (m *PBChipProperties) GetWindDamage() bool {
	if m != nil && m.WindDamage != nil {
		return *m.WindDamage
	}
	return Default_PBChipProperties_WindDamage
}

func (m *PBChipProperties) GetExplosionDamage() bool {
	if m != nil && m.ExplosionDamage != nil {
		return *m.ExplosionDamage
	}
	return Default_PBChipProperties_ExplosionDamage
}

func (m *PBChipProperties) GetHummerDamage() bool {
	if m != nil && m.HummerDamage != nil {
		return *m.HummerDamage
	}
	return Default_PBChipProperties_HummerDamage
}

func (m *PBChipProperties) GetReshulffle() bool {
	if m != nil && m.Reshulffle != nil {
		return *m.Reshulffle
	}
	return Default_PBChipProperties_Reshulffle
}

func (m *PBChipProperties) GetMultigrades() bool {
	if m != nil && m.Multigrades != nil {
		return *m.Multigrades
	}
	return Default_PBChipProperties_Multigrades
}

func (m *PBChipProperties) GetBlockMatch() bool {
	if m != nil && m.BlockMatch != nil {
		return *m.BlockMatch
	}
	return Default_PBChipProperties_BlockMatch
}

func (m *PBChipProperties) GetAutoFilling() bool {
	if m != nil && m.AutoFilling != nil {
		return *m.AutoFilling
	}
	return Default_PBChipProperties_AutoFilling
}

func (m *PBChipProperties) GetBlockRainbowSelect() bool {
	if m != nil && m.BlockRainbowSelect != nil {
		return *m.BlockRainbowSelect
	}
	return Default_PBChipProperties_BlockRainbowSelect
}

func (m *PBChipProperties) GetMinusGrade() bool {
	if m != nil && m.MinusGrade != nil {
		return *m.MinusGrade
	}
	return Default_PBChipProperties_MinusGrade
}

func (m *PBChipProperties) GetChipType() EChipType {
	if m != nil && m.ChipType != nil {
		return *m.ChipType
	}
	return Default_PBChipProperties_ChipType
}

func (m *PBChipProperties) GetChipId() uint32 {
	if m != nil && m.ChipId != nil {
		return *m.ChipId
	}
	return 0
}

type PBUserAccount struct {
	UserId               *uint32  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SdkUserId            *string  `protobuf:"bytes,2,opt,name=sdk_user_id,json=sdkUserId" json:"sdk_user_id,omitempty"`
	UserName             *string  `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SdkUserName          *string  `protobuf:"bytes,4,opt,name=sdk_user_name,json=sdkUserName" json:"sdk_user_name,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,6,opt,name=head_icon,json=headIcon" json:"head_icon,omitempty"`
	Token                *string  `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
	Timestamp            *int64   `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	DeviceToken          *string  `protobuf:"bytes,10,opt,name=device_token,json=deviceToken" json:"device_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBUserAccount) Reset()         { *m = PBUserAccount{} }
func (m *PBUserAccount) String() string { return proto.CompactTextString(m) }
func (*PBUserAccount) ProtoMessage()    {}
func (*PBUserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{8}
}

func (m *PBUserAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBUserAccount.Unmarshal(m, b)
}
func (m *PBUserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBUserAccount.Marshal(b, m, deterministic)
}
func (m *PBUserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBUserAccount.Merge(m, src)
}
func (m *PBUserAccount) XXX_Size() int {
	return xxx_messageInfo_PBUserAccount.Size(m)
}
func (m *PBUserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PBUserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PBUserAccount proto.InternalMessageInfo

func (m *PBUserAccount) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PBUserAccount) GetSdkUserId() string {
	if m != nil && m.SdkUserId != nil {
		return *m.SdkUserId
	}
	return ""
}

func (m *PBUserAccount) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *PBUserAccount) GetSdkUserName() string {
	if m != nil && m.SdkUserName != nil {
		return *m.SdkUserName
	}
	return ""
}

func (m *PBUserAccount) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *PBUserAccount) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *PBUserAccount) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *PBUserAccount) GetDeviceToken() string {
	if m != nil && m.DeviceToken != nil {
		return *m.DeviceToken
	}
	return ""
}

type PBChipShowLayer struct {
	ChipId               *uint32  `protobuf:"varint,1,opt,name=chip_id,json=chipId" json:"chip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBChipShowLayer) Reset()         { *m = PBChipShowLayer{} }
func (m *PBChipShowLayer) String() string { return proto.CompactTextString(m) }
func (*PBChipShowLayer) ProtoMessage()    {}
func (*PBChipShowLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{9}
}

func (m *PBChipShowLayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipShowLayer.Unmarshal(m, b)
}
func (m *PBChipShowLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipShowLayer.Marshal(b, m, deterministic)
}
func (m *PBChipShowLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipShowLayer.Merge(m, src)
}
func (m *PBChipShowLayer) XXX_Size() int {
	return xxx_messageInfo_PBChipShowLayer.Size(m)
}
func (m *PBChipShowLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipShowLayer.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipShowLayer proto.InternalMessageInfo

func (m *PBChipShowLayer) GetChipId() uint32 {
	if m != nil && m.ChipId != nil {
		return *m.ChipId
	}
	return 0
}

type PBChipDestroyPriority struct {
	ChipId               *uint32  `protobuf:"varint,1,opt,name=chip_id,json=chipId" json:"chip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBChipDestroyPriority) Reset()         { *m = PBChipDestroyPriority{} }
func (m *PBChipDestroyPriority) String() string { return proto.CompactTextString(m) }
func (*PBChipDestroyPriority) ProtoMessage()    {}
func (*PBChipDestroyPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a64e7d48777365, []int{10}
}

func (m *PBChipDestroyPriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBChipDestroyPriority.Unmarshal(m, b)
}
func (m *PBChipDestroyPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBChipDestroyPriority.Marshal(b, m, deterministic)
}
func (m *PBChipDestroyPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBChipDestroyPriority.Merge(m, src)
}
func (m *PBChipDestroyPriority) XXX_Size() int {
	return xxx_messageInfo_PBChipDestroyPriority.Size(m)
}
func (m *PBChipDestroyPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_PBChipDestroyPriority.DiscardUnknown(m)
}

var xxx_messageInfo_PBChipDestroyPriority proto.InternalMessageInfo

func (m *PBChipDestroyPriority) GetChipId() uint32 {
	if m != nil && m.ChipId != nil {
		return *m.ChipId
	}
	return 0
}

func init() {
	proto.RegisterEnum("FunPlus.Common.Config.EChipType", EChipType_name, EChipType_value)
	proto.RegisterEnum("FunPlus.Common.Config.EColor", EColor_name, EColor_value)
	proto.RegisterEnum("FunPlus.Common.Config.EBonusType", EBonusType_name, EBonusType_value)
	proto.RegisterEnum("FunPlus.Common.Config.ESide", ESide_name, ESide_value)
	proto.RegisterEnum("FunPlus.Common.Config.EBlockType", EBlockType_name, EBlockType_value)
	proto.RegisterEnum("FunPlus.Common.Config.PBChipGrid", PBChipGrid_name, PBChipGrid_value)
	proto.RegisterType((*PBChipDefinition)(nil), "FunPlus.Common.Config.PBChipDefinition")
	proto.RegisterType((*PBChipPropertyDefinition)(nil), "FunPlus.Common.Config.PBChipPropertyDefinition")
	proto.RegisterType((*PBChipDestroyPrioritys)(nil), "FunPlus.Common.Config.PBChipDestroyPrioritys")
	proto.RegisterType((*PBChipShowLayers)(nil), "FunPlus.Common.Config.PBChipShowLayers")
	proto.RegisterType((*PBChipGroupMap)(nil), "FunPlus.Common.Config.PBChipGroupMap")
	proto.RegisterType((*PBChip)(nil), "FunPlus.Common.Config.PBChip")
	proto.RegisterType((*PBCellPos)(nil), "FunPlus.Common.Config.PBCellPos")
	proto.RegisterType((*PBChipProperties)(nil), "FunPlus.Common.Config.PBChipProperties")
	proto.RegisterType((*PBUserAccount)(nil), "FunPlus.Common.Config.PBUserAccount")
	proto.RegisterType((*PBChipShowLayer)(nil), "FunPlus.Common.Config.PBChipShowLayer")
	proto.RegisterType((*PBChipDestroyPriority)(nil), "FunPlus.Common.Config.PBChipDestroyPriority")
}

func init() { proto.RegisterFile("match3_common.proto", fileDescriptor_f1a64e7d48777365) }

var fileDescriptor_f1a64e7d48777365 = []byte{
	// 1785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x51, 0x73, 0xdb, 0xb8,
	0xf1, 0x0f, 0x2d, 0x4b, 0x36, 0x57, 0x92, 0x0d, 0x23, 0x76, 0xc2, 0xff, 0x3f, 0xe7, 0x8b, 0xa3,
	0x5e, 0x12, 0x9f, 0xee, 0x26, 0x73, 0x67, 0x3f, 0x74, 0x26, 0x0f, 0xd7, 0x89, 0x74, 0x8e, 0xcf,
	0x57, 0x27, 0xd1, 0x30, 0x4a, 0x33, 0xbd, 0x17, 0x0e, 0x4d, 0xc2, 0x12, 0xc6, 0x24, 0xc0, 0x01,
	0x21, 0xdb, 0xfa, 0x06, 0x9d, 0x3e, 0xf4, 0xa5, 0x5f, 0xa1, 0xdf, 0xa1, 0x9f, 0xae, 0x33, 0x1d,
	0x2c, 0x40, 0x51, 0x4a, 0xe3, 0x3c, 0xdc, 0x93, 0xb0, 0xbf, 0xfd, 0xed, 0x62, 0x77, 0xb1, 0x0b,
	0x50, 0x70, 0x3f, 0x8f, 0x75, 0x32, 0x3d, 0x8e, 0x12, 0x99, 0xe7, 0x52, 0xbc, 0x28, 0x94, 0xd4,
	0x92, 0xee, 0xbd, 0x9e, 0x89, 0x51, 0x36, 0x2b, 0x5f, 0x0c, 0x2d, 0x3a, 0x94, 0xe2, 0x92, 0x4f,
	0x7a, 0xa7, 0x40, 0x46, 0x83, 0xe1, 0x94, 0x17, 0x3f, 0xb3, 0x4b, 0x2e, 0xb8, 0xe6, 0x52, 0xd0,
	0x63, 0x68, 0x26, 0x53, 0x5e, 0x94, 0x81, 0x77, 0xd0, 0x38, 0x6c, 0x1f, 0xed, 0xbf, 0xf8, 0xac,
	0xe9, 0x0b, 0x6b, 0x17, 0x5a, 0x6e, 0x2f, 0x81, 0xc0, 0x02, 0x23, 0x25, 0x0b, 0xa6, 0xf4, 0x7c,
	0xc9, 0xe1, 0x29, 0x40, 0x61, 0x51, 0xce, 0x2a, 0xaf, 0xcf, 0xbf, 0xe8, 0x75, 0xb4, 0xa0, 0x87,
	0x4b, 0xa6, 0xbd, 0x14, 0x1e, 0x54, 0xd1, 0x96, 0x5a, 0xc9, 0xf9, 0x48, 0x71, 0xa9, 0xb8, 0x9e,
	0x97, 0xf4, 0x57, 0xf0, 0x8b, 0x4a, 0x70, 0x3b, 0x7c, 0xff, 0xc5, 0x1d, 0x3e, 0xf1, 0x10, 0xd6,
	0xe6, 0xbd, 0xb0, 0xaa, 0xc9, 0xfb, 0xa9, 0xbc, 0x39, 0x8f, 0xe7, 0x4c, 0x95, 0xf4, 0x27, 0x68,
	0x65, 0xb8, 0x72, 0xce, 0x9f, 0x7d, 0xd1, 0xf9, 0xc2, 0x30, 0x74, 0x56, 0xbd, 0x1e, 0x6c, 0x59,
	0xd5, 0xa9, 0x92, 0xb3, 0xe2, 0x4d, 0x5c, 0x50, 0x02, 0x8d, 0x3c, 0x2e, 0xd0, 0x9d, 0x1f, 0x9a,
	0x65, 0xef, 0xef, 0x2d, 0x68, 0x59, 0x12, 0x7d, 0x08, 0x1b, 0xa6, 0xac, 0x11, 0x4f, 0x03, 0xef,
	0xc0, 0x3b, 0xec, 0x86, 0x2d, 0x23, 0x9e, 0xa5, 0xf4, 0x35, 0xf8, 0xa8, 0xd0, 0xf3, 0x82, 0x05,
	0x6b, 0x07, 0xde, 0xe1, 0xd6, 0xd1, 0xc1, 0x1d, 0xa1, 0x9c, 0x18, 0x4f, 0xe3, 0x79, 0xc1, 0x5e,
	0x6e, 0x0c, 0xc7, 0xd1, 0x5b, 0x29, 0x58, 0xb8, 0x99, 0x38, 0x88, 0xfe, 0x09, 0x9a, 0x89, 0xcc,
	0xa4, 0x0a, 0x1a, 0xe8, 0x63, 0xff, 0x4e, 0x1f, 0x86, 0xf4, 0x12, 0xf0, 0xc7, 0xfa, 0xb0, 0x76,
	0xf4, 0x1c, 0xe0, 0x42, 0x8a, 0x59, 0x69, 0x23, 0x59, 0x47, 0x2f, 0x4f, 0xee, 0xf2, 0x32, 0x30,
	0x4c, 0x0c, 0x05, 0x70, 0x69, 0x3d, 0xf9, 0x17, 0x15, 0x4c, 0x29, 0xac, 0x8b, 0x38, 0x67, 0x41,
	0xf3, 0xc0, 0x3b, 0xf4, 0x43, 0x5c, 0xd3, 0xc7, 0xd0, 0xbe, 0xc8, 0x64, 0x72, 0x15, 0x4d, 0x54,
	0x9c, 0xb2, 0xa0, 0x85, 0x75, 0x00, 0x84, 0x4e, 0x0d, 0x42, 0x9f, 0xc2, 0x16, 0xaa, 0x22, 0xc5,
	0x4a, 0x39, 0x53, 0x09, 0x0b, 0x00, 0x8b, 0xd9, 0x45, 0x34, 0x74, 0xa0, 0xf1, 0x33, 0x31, 0x45,
	0x8f, 0xb8, 0x48, 0xd9, 0x6d, 0xb0, 0x61, 0xfd, 0x20, 0x74, 0x66, 0x90, 0x4f, 0xda, 0xd3, 0x3f,
	0xf0, 0x7e, 0x67, 0x7b, 0xd2, 0x7d, 0x80, 0x72, 0x2a, 0x6f, 0x22, 0x3c, 0xf3, 0xa0, 0x8d, 0x1b,
	0xf9, 0x65, 0xd5, 0x0b, 0xf4, 0x5b, 0x20, 0xa9, 0xed, 0xba, 0xa8, 0x6a, 0xb6, 0xa0, 0x83, 0xa4,
	0xed, 0x74, 0xb5, 0x1b, 0x69, 0x1f, 0x76, 0x52, 0x79, 0x23, 0x6c, 0x7a, 0x55, 0x27, 0x74, 0x1d,
	0xb7, 0x52, 0x0c, 0x6d, 0x4b, 0xf4, 0x61, 0x27, 0x91, 0x59, 0x16, 0x17, 0x25, 0x4b, 0x17, 0xdc,
	0x2d, 0xcb, 0x5d, 0x28, 0x1c, 0xf7, 0x09, 0x74, 0x0c, 0xc4, 0x12, 0x1d, 0xc5, 0x82, 0xe7, 0xc1,
	0xf6, 0x81, 0x77, 0xb8, 0x19, 0xb6, 0x1d, 0xf6, 0x4a, 0xf0, 0x9c, 0x9e, 0x82, 0x7f, 0x62, 0xbc,
	0x4c, 0x14, 0x4f, 0x03, 0xf2, 0xc5, 0x73, 0xad, 0x3a, 0x9a, 0xa7, 0x2f, 0x5b, 0xcc, 0x9d, 0x29,
	0xab, 0x6c, 0xe9, 0x61, 0x9d, 0x2e, 0xbb, 0x66, 0x42, 0x9b, 0xb0, 0x76, 0xf0, 0x7c, 0xb7, 0x1c,
	0x7e, 0x62, 0xe0, 0xb3, 0xd4, 0x9c, 0x7e, 0x79, 0xc5, 0x45, 0x40, 0xed, 0xe9, 0x9b, 0x75, 0xef,
	0x39, 0xf8, 0xa3, 0xc1, 0x90, 0x65, 0xd9, 0x48, 0x96, 0xb4, 0x03, 0xde, 0x2d, 0x0e, 0x42, 0x33,
	0xf4, 0x6e, 0x8d, 0x34, 0xc7, 0xde, 0x6f, 0x86, 0xde, 0xbc, 0xf7, 0xef, 0x8d, 0x6a, 0x5c, 0xeb,
	0x53, 0xa1, 0xcf, 0xa1, 0xcd, 0x85, 0x66, 0x2a, 0x4e, 0x34, 0xbf, 0x66, 0x68, 0xba, 0xf9, 0xb2,
	0x79, 0x19, 0x67, 0x25, 0x0b, 0x97, 0x35, 0xf4, 0x31, 0x6c, 0x5c, 0xc6, 0x59, 0xc6, 0xc5, 0x04,
	0x3d, 0x2e, 0x48, 0x15, 0x4a, 0xbf, 0x01, 0xdb, 0x72, 0x51, 0x2e, 0xaf, 0x19, 0x4e, 0xcb, 0x82,
	0xe3, 0xa3, 0xe2, 0x8d, 0xbc, 0x66, 0x35, 0xab, 0xbc, 0x89, 0x0b, 0xcc, 0xe3, 0x13, 0xd6, 0xfb,
	0x9b, 0xb8, 0xa0, 0xdf, 0xc1, 0x96, 0x65, 0xa5, 0x71, 0x1e, 0x4f, 0x58, 0x34, 0xc3, 0xb9, 0x59,
	0x30, 0x3b, 0xa8, 0xfc, 0x19, 0x75, 0x1f, 0xfe, 0x87, 0xac, 0x71, 0x02, 0x3e, 0x4b, 0x1e, 0xd3,
	0x7d, 0x68, 0xb9, 0x54, 0x9b, 0xcb, 0xa4, 0x56, 0x9d, 0xe5, 0x44, 0xc9, 0x1b, 0x93, 0x25, 0x59,
	0xc9, 0xd2, 0xa1, 0x86, 0x80, 0x63, 0xcd, 0x52, 0x9c, 0x8f, 0x9a, 0xe0, 0x50, 0x43, 0xb8, 0xe6,
	0x25, 0xbf, 0xc8, 0x58, 0xb0, 0xb9, 0x42, 0x70, 0xa8, 0x89, 0x40, 0xc7, 0x6a, 0xc2, 0x34, 0x0e,
	0x50, 0x1d, 0x81, 0x05, 0xe9, 0x21, 0x74, 0xf0, 0x55, 0x72, 0xd9, 0x04, 0xb0, 0x72, 0x22, 0xa8,
	0xb2, 0xb9, 0xd0, 0x67, 0xd0, 0xbe, 0xe1, 0x22, 0xad, 0x88, 0xed, 0x65, 0x22, 0x18, 0x8d, 0xe3,
	0xfd, 0x00, 0x84, 0xdd, 0x16, 0x99, 0x2c, 0xb9, 0x14, 0x15, 0xb9, 0xb3, 0x4c, 0xde, 0x5e, 0xa8,
	0x9d, 0x45, 0x1f, 0xba, 0xd3, 0x59, 0x9e, 0x33, 0x55, 0xd1, 0xbb, 0x2b, 0x05, 0xb5, 0x3a, 0xc7,
	0x7d, 0x0a, 0xa0, 0x58, 0x39, 0x9d, 0x65, 0x97, 0x97, 0x19, 0xc3, 0x69, 0xaa, 0x83, 0xa8, 0x15,
	0xa6, 0xcf, 0xf2, 0x59, 0xa6, 0x39, 0xce, 0x63, 0x69, 0xc7, 0xa9, 0xce, 0xaa, 0xd6, 0x98, 0xac,
	0x5c, 0x1b, 0x99, 0x54, 0x71, 0x0e, 0x6a, 0x87, 0xb6, 0x8f, 0x8c, 0xc2, 0xd4, 0x29, 0x9e, 0x69,
	0x19, 0x5d, 0x72, 0xdb, 0x94, 0xf7, 0x57, 0x3c, 0x1a, 0xd5, 0x6b, 0xab, 0xa1, 0x7f, 0x84, 0x5d,
	0xeb, 0x51, 0xc5, 0x5c, 0x5c, 0xc8, 0x9b, 0xa8, 0x64, 0x66, 0x86, 0x83, 0x07, 0xcb, 0x16, 0x14,
	0x29, 0xa1, 0x65, 0xbc, 0x47, 0x82, 0x09, 0x25, 0xe7, 0xe6, 0x12, 0xb6, 0xf7, 0xea, 0xc3, 0x95,
	0x50, 0x50, 0x63, 0xaf, 0xd7, 0x95, 0xa7, 0x66, 0xf7, 0xf7, 0x3f, 0x35, 0x4b, 0x6f, 0xd9, 0xde,
	0xf2, 0x5b, 0xd6, 0xfb, 0x8f, 0x07, 0xdd, 0xd1, 0xe0, 0x43, 0xc9, 0xd4, 0xab, 0x24, 0x91, 0x33,
	0xa1, 0x0d, 0x75, 0x56, 0x32, 0xb5, 0xf4, 0xec, 0x19, 0xf1, 0x2c, 0xa5, 0x5f, 0x43, 0xbb, 0x4c,
	0xaf, 0xa2, 0x4a, 0xb9, 0x86, 0x17, 0x85, 0x5f, 0xa6, 0x57, 0x1f, 0xac, 0xfe, 0x11, 0xf8, 0xa8,
	0xc3, 0x47, 0xa4, 0x81, 0xda, 0x4d, 0x03, 0xbc, 0x35, 0x0f, 0x49, 0x0f, 0xba, 0x0b, 0x63, 0x24,
	0xac, 0x23, 0xa1, 0xed, 0xcc, 0x91, 0xf3, 0x08, 0xfc, 0x29, 0x8b, 0xd3, 0x88, 0x27, 0x52, 0xe0,
	0xa0, 0xf9, 0xe1, 0xa6, 0x01, 0xce, 0x12, 0x29, 0xe8, 0x2e, 0x34, 0xb5, 0xbc, 0x62, 0x02, 0x5b,
	0xdf, 0x0f, 0xad, 0x40, 0xbf, 0x02, 0x5f, 0xf3, 0x9c, 0x95, 0x3a, 0xce, 0x0b, 0x6c, 0xfa, 0x46,
	0x58, 0x03, 0xe6, 0xa6, 0x4d, 0xd9, 0x35, 0x4f, 0x58, 0x64, 0x4d, 0xc1, 0xee, 0x69, 0xb1, 0xb1,
	0x81, 0x7a, 0x7d, 0xd8, 0xfe, 0xe4, 0x73, 0xe1, 0xce, 0x77, 0xbf, 0xf7, 0x03, 0xec, 0x7d, 0xf6,
	0xbb, 0xe5, 0x4e, 0x8b, 0xfe, 0xdf, 0x5a, 0xe0, 0x2f, 0xce, 0x85, 0xb6, 0xa1, 0x3a, 0x19, 0x72,
	0x8f, 0x76, 0x60, 0x73, 0x38, 0x8e, 0xf0, 0x4d, 0x27, 0x9e, 0x93, 0xf0, 0x5d, 0x26, 0x6b, 0x95,
	0x64, 0xda, 0x86, 0x34, 0x9c, 0xd9, 0xc7, 0x38, 0xcb, 0xc8, 0x3a, 0xed, 0x82, 0x3f, 0x1c, 0x47,
	0x23, 0xa9, 0x74, 0x9c, 0x91, 0x26, 0xdd, 0x86, 0xf6, 0x42, 0x3c, 0x13, 0xa4, 0x45, 0x09, 0x74,
	0x16, 0xc0, 0xbb, 0x99, 0x26, 0x1b, 0x74, 0x0b, 0x60, 0x38, 0x8e, 0x4e, 0x55, 0x7c, 0xcd, 0xf5,
	0x9c, 0x6c, 0xd2, 0x1d, 0xe8, 0x0e, 0xc7, 0xd1, 0x18, 0xaf, 0x84, 0x77, 0x22, 0x9b, 0x13, 0xdf,
	0x41, 0x03, 0xae, 0xf4, 0x74, 0x24, 0xb9, 0xd0, 0x04, 0xe8, 0x43, 0xb8, 0xbf, 0x02, 0x7d, 0x64,
	0x7c, 0x32, 0xd5, 0xa4, 0x4d, 0xf7, 0x60, 0x67, 0x45, 0x71, 0x2e, 0x65, 0x41, 0x3a, 0x95, 0x8b,
	0x38, 0xb9, 0x32, 0x8f, 0xba, 0x48, 0x49, 0xd7, 0x41, 0x43, 0xfb, 0xac, 0x71, 0x29, 0xc8, 0x96,
	0x8b, 0x65, 0x18, 0x97, 0xec, 0xe8, 0xf6, 0x88, 0x6c, 0xd3, 0x07, 0x40, 0x57, 0x28, 0x27, 0x42,
	0xab, 0x39, 0x21, 0x2e, 0xcb, 0x61, 0x9c, 0x33, 0x15, 0x93, 0x1d, 0x57, 0x81, 0x57, 0x8a, 0xc5,
	0x84, 0x52, 0x0a, 0x5b, 0x58, 0xc5, 0xd0, 0xdc, 0x00, 0xe6, 0x02, 0x20, 0xf7, 0x9d, 0xdf, 0xb7,
	0x12, 0xe7, 0x97, 0xec, 0xba, 0xad, 0xdf, 0xca, 0x81, 0x94, 0xa5, 0x66, 0xaa, 0x24, 0x7b, 0x0e,
	0x3a, 0x13, 0x5c, 0x87, 0xb1, 0x48, 0x65, 0x4e, 0x1e, 0xb8, 0x5a, 0x19, 0x08, 0x3f, 0x08, 0xc9,
	0x43, 0xb7, 0xd1, 0x88, 0x17, 0x8c, 0x04, 0x4b, 0xc1, 0xfe, 0x78, 0x7b, 0x44, 0xfe, 0x6f, 0x25,
	0xf8, 0x1f, 0xc9, 0xff, 0x3b, 0xf9, 0x4d, 0xcc, 0xb3, 0x0b, 0x79, 0x4b, 0x1e, 0x39, 0x77, 0x21,
	0x4b, 0x87, 0xb1, 0x2a, 0x98, 0x26, 0xfb, 0x74, 0x17, 0xc8, 0x32, 0x32, 0x8a, 0xf5, 0x94, 0x7c,
	0x4d, 0xef, 0xc3, 0xf6, 0x32, 0x7a, 0x22, 0x52, 0xf2, 0x93, 0xcb, 0xf8, 0x9c, 0xc5, 0xd7, 0xac,
	0x24, 0x8f, 0x9d, 0x78, 0x2a, 0x64, 0xce, 0x4a, 0x72, 0xe0, 0xb6, 0x0a, 0x59, 0x32, 0x4f, 0x32,
	0x46, 0x9e, 0x54, 0xf5, 0x91, 0xf2, 0x8a, 0x33, 0xd2, 0x73, 0x61, 0xbf, 0x96, 0x71, 0x4e, 0xfe,
	0xe0, 0x84, 0xa1, 0x2c, 0xe6, 0xe4, 0x1b, 0xb7, 0xd7, 0x50, 0x8a, 0x6b, 0x36, 0x97, 0x6a, 0xc0,
	0x32, 0x4d, 0x9e, 0xba, 0xb3, 0x5d, 0x06, 0xcf, 0xb9, 0xb8, 0x22, 0xcf, 0x5c, 0xdf, 0xfd, 0xca,
	0xb2, 0x6c, 0x4e, 0x9e, 0xbb, 0xde, 0x1a, 0x4e, 0x99, 0x52, 0x9c, 0x95, 0xe4, 0xd0, 0x01, 0xbf,
	0x30, 0x31, 0x95, 0xb3, 0x92, 0x91, 0x6f, 0x2b, 0x20, 0xe6, 0x6a, 0x60, 0xba, 0xb3, 0xbf, 0xc8,
	0x42, 0x6b, 0xa6, 0xc8, 0x77, 0x14, 0xa0, 0x85, 0x71, 0xdd, 0x92, 0xef, 0xfb, 0xff, 0xf0, 0xa0,
	0x65, 0xbf, 0x64, 0x31, 0x9b, 0xc5, 0xb7, 0x2c, 0xb9, 0x87, 0x56, 0x28, 0x87, 0x2c, 0x25, 0x1e,
	0x7a, 0x45, 0xf1, 0x54, 0x31, 0x26, 0xc8, 0x1a, 0x16, 0x16, 0x81, 0xbf, 0xb2, 0x2c, 0x93, 0x37,
	0xa4, 0x51, 0x7b, 0x18, 0x64, 0x33, 0x46, 0xd6, 0x6b, 0x79, 0x64, 0x12, 0x69, 0xd6, 0x16, 0xa3,
	0x99, 0x2a, 0x32, 0xe6, 0xe6, 0x02, 0x91, 0x77, 0x2a, 0x16, 0x13, 0x46, 0x36, 0xfa, 0xff, 0xf4,
	0x00, 0xea, 0x8f, 0x62, 0xe3, 0xa2, 0xfe, 0x2c, 0x26, 0xf7, 0x6a, 0xf9, 0xcf, 0x5c, 0x33, 0xe2,
	0xd5, 0xf2, 0x40, 0xe6, 0x17, 0x64, 0xcd, 0xf4, 0x93, 0x95, 0xff, 0x12, 0xca, 0xe4, 0x8a, 0x69,
	0xd2, 0xa8, 0xa1, 0x5f, 0x1c, 0xb4, 0x5e, 0x43, 0xee, 0xfa, 0x27, 0x4d, 0xfa, 0x15, 0x04, 0x2b,
	0xac, 0xe8, 0x9d, 0x5a, 0xf8, 0x68, 0xf5, 0xff, 0xe5, 0x41, 0xf3, 0xe4, 0x3d, 0x4f, 0x99, 0xa9,
	0x8a, 0xf9, 0xb5, 0xf1, 0x6c, 0x9a, 0xaa, 0xa0, 0x38, 0x90, 0x5a, 0xcb, 0x9c, 0xdc, 0x33, 0xae,
	0x11, 0x18, 0xcb, 0x22, 0xc4, 0xd9, 0xc4, 0x18, 0x11, 0xb2, 0xf2, 0x9a, 0xe9, 0xbf, 0x25, 0x1b,
	0x8b, 0x36, 0xcc, 0x29, 0x57, 0x86, 0x64, 0xdd, 0x74, 0xc8, 0x12, 0xe7, 0x9c, 0x5d, 0x6a, 0xd2,
	0x5c, 0xec, 0x8d, 0x22, 0x16, 0xaf, 0xb2, 0x40, 0x64, 0xa3, 0x9f, 0x9a, 0xda, 0x99, 0xfb, 0xa9,
	0xba, 0xd8, 0x06, 0xcb, 0x17, 0xdb, 0xa0, 0xba, 0xbc, 0x3c, 0xe3, 0xc9, 0x48, 0x2a, 0x16, 0xc9,
	0x94, 0xac, 0x39, 0xe6, 0x47, 0xc6, 0x52, 0xd2, 0x30, 0x6e, 0x51, 0x37, 0x2b, 0xa7, 0x1f, 0xa5,
	0x4c, 0xed, 0xed, 0x36, 0x30, 0x23, 0xa6, 0xb4, 0x14, 0xa4, 0xd9, 0xff, 0x0d, 0xa0, 0xfe, 0xbc,
	0x35, 0xdd, 0xc4, 0xaa, 0x4d, 0x7c, 0x68, 0xb2, 0xc8, 0x8c, 0xa5, 0x67, 0x97, 0x66, 0x22, 0xd7,
	0xaa, 0xe5, 0x11, 0x69, 0x54, 0xcb, 0x63, 0xb2, 0x6e, 0x97, 0xc7, 0xb7, 0x47, 0xa4, 0x59, 0x2d,
	0x8f, 0x49, 0x6b, 0xd0, 0xf9, 0x0d, 0xf0, 0x33, 0x00, 0xff, 0x99, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xad, 0x87, 0xc2, 0x61, 0xaf, 0x0f, 0x00, 0x00,
}
